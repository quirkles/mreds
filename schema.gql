# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddAwardInput {
  awardName: String!
  awardValue: Float
  comment: String
  winners: [String!]!
}

input AddMatchInput {
  competitionId: ID!
  cupRound: String
  date: String!
  isForfeit: Boolean!
  isHome: Boolean!
  leaguePosition: Float
  matchPlayers: [PlayerInMatchInput!]!
  opponentGoals: Float!
  opponentId: ID!
  seasonId: ID!
  teamGoals: Float!
  teamId: ID!
}

input AddOrganizationInput {
  city: String
  country: String
  name: String!
  website: String
  yearFounded: String
}

input AddPlayerInput {
  dateOfBirth: String
  isActive: Boolean!
  isCaptain: Boolean!
  isHallOfFame: Boolean!
  isViceCaptain: Boolean!
  name: String!
  nationality: String
  position: String!
  seasonIds: [String!]!
  squadNumber: String!
  yearJoined: String!
}

input AddTeamInput {
  country: String
  isActive: Boolean!
  location: String
  teamName: String!
  yearFounded: String
}

input AddTeamSeasonInput {
  comment: String
  division: String
  leaguePosition: Float
  yearEnded: String!
  yearStarted: String!
}

input AddTrophyInput {
  comment: String
  isFinal: Boolean!
  isWinner: Boolean!
  name: String!
  opponent: String
  seasonId: String!
  year: String!
}

type Award {
  _id: ID!
  awardName: String!
  awardValue: Float
  comment: String
  seasonId: TeamSeason!
  winners: [String!]!
}

type AwardByPlayer {
  _id: String!
  awardName: String!
  awardValue: Float
  comment: String
  season: String!
}

type Competition {
  _id: ID!
  competitionType: String!
  isActive: Boolean!
  matchMinutes: Float!
  name: String!
  numberOfTeams: Float!
  orgId: ID!
  playersPerTeam: Float!
  winners: [CompetitionWinner!]!
}

input CompetitionInput {
  competitionType: String!
  isActive: Boolean!
  matchMinutes: Float!
  name: String!
  numberOfTeams: Float!
  playersPerTeam: Float!
}

type CompetitionWinner {
  isRunnerUp: Boolean!
  isWinner: Boolean!
  teamId: Team!
  year: String!
}

input EditBadgeInput {
  public_id: String!
  url: String!
}

input EditImageInput {
  public_id: String!
  url: String!
}

input EditOrgBadgeInput {
  public_id: String!
  url: String!
}

input EditPasswordInput {
  newPassword: String!
  password: String!
}

input EditPhotoInput {
  public_id: String!
  url: String!
}

input EditPlayerInput {
  dateOfBirth: String
  isActive: Boolean!
  isCaptain: Boolean!
  isHallOfFame: Boolean!
  isViceCaptain: Boolean!
  name: String!
  nationality: String
  position: String!
  seasonIds: [String!]!
  squadNumber: String!
  yearJoined: String!
}

input EditTrophyInput {
  comment: String
  isFinal: Boolean!
  isWinner: Boolean!
  name: String!
  opponent: String
  seasonId: String!
  year: String!
}

input EditUserInput {
  dateOfBirth: String
  email: String!
  nationality: String
  username: String!
}

input ForgotPasswordInput {
  email: String!
}

"""The Match model"""
type Match {
  _id: ID!
  competitionId: Competition!
  cupRound: String
  date: String!
  isForfeit: Boolean!
  isHome: Boolean!
  leaguePosition: Float
  matchPlayers: [PlayerInMatch!]!
  opponentGoals: Float!
  opponentId: Team!
  seasonId: TeamSeason!
  teamGoals: Float!
  teamId: Team!
}

type MatchStats {
  _id: String
  conceded: Float
  defeats: Float
  difference: Float
  draws: Float
  oppAvg: Float
  scored: Float
  teamAvg: Float
  total: Float
  wins: Float
}

type MatchesBySeason {
  _id: String!
  competition: String!
  date: String!
  isForfeit: Boolean!
  isHome: Boolean!
  opponentBadge: String!
  opponentGoals: Float!
  opponentName: String!
  teamGoals: Float!
  teamName: String!
}

type MostByPlayerMatches {
  _id: String!
  date: String!
  opponent: String!
  opponentGoals: Float!
  teamGoals: Float!
  total: Float!
}

type MostGoalsAndAssists {
  maxAssists: Float!
  maxGoals: Float!
}

type MostGoalsMatches {
  _id: String!
  date: String!
  isHome: Boolean!
  opponent: String!
  opponentGoals: Float!
  opponentId: String!
  teamGoals: Float!
}

type MostGoalsStats {
  maxConceded: [MostGoalsMatches!]
  maxDiff: [MostGoalsMatches!]
  maxGoals: [MostGoalsMatches!]
  minDiff: [MostGoalsMatches!]
}

type MostInMatch {
  date: String!
  matchId: String!
  opponentGoals: Float!
  opponentName: String!
  player: String!
  teamGoals: Float!
  total: Float!
}

type Mutation {
  addCompetition(data: CompetitionInput!, orgId: String!): Competition!
  addMatch(data: AddMatchInput!): Match!
  addOrganization(data: AddOrganizationInput!): Organization!
  addPlayer(data: AddPlayerInput!, teamId: String!): Player!
  addSeasonAward(data: AddAwardInput!, seasonId: String!, teamId: String!): Award!
  addTeam(data: AddTeamInput!, orgId: String!): Team!
  addTeamSeason(data: AddTeamSeasonInput!, teamId: String!): TeamSeason!
  addTeamToOrg(orgId: String!, teamId: String!): Organization!
  addTrophy(data: AddTrophyInput!, teamId: String!): Trophy!
  c(data: EditOrgBadgeInput!, orgId: String!): Organization!
  deleteAward(awardId: String!, teamId: String!): Award!
  deleteCompetition(compId: String!, orgId: String!): Competition!
  deleteMatch(matchId: String!, teamId: String!): Match!
  deleteOrg(orgId: String!): Organization!
  deletePlayer(playerId: String!, teamId: String!): Player!
  deleteSeason(seasonId: String!, teamId: String!): TeamSeason!
  deleteTeam(teamId: String!): Team!
  deleteTeamRole(roleId: String!, teamId: String!): Team!
  deleteTrophy(teamId: String!, trophyId: String!): Trophy!
  deleteUser: User!
  editAward(awardId: String!, data: AddAwardInput!, seasonId: String!, teamId: String!): Award!
  editMatch(data: AddMatchInput!, matchId: String!): Match!
  editOrgBadge(data: EditOrgBadgeInput!, orgId: String!): Organization!
  editPassword(data: EditPasswordInput!): User!
  editPlayerPhoto(data: EditPhotoInput!, playerId: String!, teamId: String!): Player!
  editProfileImage(data: EditImageInput!): User!
  editSeason(data: AddTeamSeasonInput!, seasonId: String!, teamId: String!): TeamSeason!
  editTeamBadge(data: EditBadgeInput!, teamId: String!): Team!
  editTrophy(data: EditTrophyInput!, teamId: String!, trophyId: String!): Trophy!
  editUser(data: EditUserInput!): User!
  forgotPassword(data: ForgotPasswordInput!): User!
  logOutUser: User!
  registerUser(data: RegisterUserInput!): User!
  resetPassword(data: ResetPasswordInput!): User!
  signInUser(data: SignInUserInput!): User!
  updateCompetition(compId: String!, data: CompetitionInput!, orgId: String!): Competition!
  updateOrganization(data: UpdateOrganizationInput!, orgId: String!): Organization!
  updatePlayer(data: EditPlayerInput!, playerId: String!, teamId: String!): Player!
  updateTeamDetails(data: UpdateTeamInput!, teamId: String!): Team!
  updateTeamRoles(data: UpdateTeamRolesInput!, teamId: String!): Team!
}

type OpponentTable {
  _id: String!
  draws: Float!
  isActive: Boolean!
  losses: Float!
  opponentBadge: String!
  opponentName: String!
  total: Float!
  totalGoalDifference: Float!
  totalGoalsConceded: Float!
  totalGoalsScored: Float!
  wins: Float!
}

"""The Organization model"""
type Organization {
  _id: ID!
  adminIds: [String!]!
  badge: UploadedImage!
  city: String
  competitions: [Competition!]!
  country: String
  createdAt: Timestamp
  isVerified: Boolean!
  name: String!
  teamIds: [String!]!
  updatedAt: Timestamp
  website: String
  yearFounded: String
}

type PastPlayer {
  _id: String!
  image: String!
  joined: String!
  left: String!
  name: String!
  nationality: String!
  position: String!
  seasons: Float!
}

"""The Player model"""
type Player {
  _id: ID!
  createdAt: Timestamp
  dateOfBirth: String
  image: UploadedImage!
  isActive: Boolean!
  isCaptain: Boolean!
  isHallOfFame: Boolean!
  isViceCaptain: Boolean!
  name: String!
  nationality: String
  position: String!
  seasonIds: [TeamSeason!]!
  squadNumber: String!
  teamIds: [Team!]!
  updatedAt: Timestamp
  yearJoined: String!
}

type PlayerInMatch {
  _id: ID!
  apps: Float!
  assists: Float!
  cleanSheet: Boolean!
  conceded: Float!
  goals: Float!
  isStarter: Boolean!
  match: Match!
  matchPosition: String
  minutes: Float!
  mvp: Boolean!
  ownGoals: Float!
  pensMissed: Float!
  pensSaved: Float!
  pensScored: Float!
  playerId: Player!
  redCard: Boolean!
  yellowCards: Float!
}

input PlayerInMatchInput {
  assists: Float!
  cleanSheet: Boolean!
  conceded: Float!
  goals: Float!
  isStarter: Boolean!
  matchPosition: String
  minutes: Float!
  mvp: Boolean!
  ownGoals: Float!
  pensMissed: Float!
  pensSaved: Float!
  pensScored: Float!
  playerId: ID!
  redCard: Boolean!
  yellowCards: Float!
}

type PlayerStats {
  _id: String!
  apps: Float!
  assists: Float!
  cleanSheet: Float!
  conceded: Float!
  defeats: Float!
  difference: Float!
  draws: Float!
  gamesWithAssist: Float!
  gamesWithGoal: Float!
  gamesWithGoalAndAssist: Float!
  gamesWithGoalOrAssist: Float!
  goals: Float!
  goalsAgainst: Float!
  goalsFor: Float!
  isStarter: Boolean!
  minutes: Float!
  mvp: Float!
  ownGoals: Float!
  pensMissed: Float!
  pensSaved: Float!
  pensScored: Float!
  redCard: Float!
  wins: Float!
  yellowCards: Float!
}

type PlayerVsStats {
  assists: Float!
  conceded: Float!
  goals: Float!
  matches: Float!
  opponent: String!
  opponentBadge: String!
  opponentId: String!
  opponentName: String!
}

type PositionFinishes {
  division: String
  name: String
  position: Float
  seasonId: String
}

type Query {
  allPlayers: [Player!]!
  allTimeMatchStats(teamId: String!): MatchStats!
  allTimeSquadStats(teamId: String!): [SquadAllTimeStats!]!
  awardsByPlayer(playerId: String!): [AwardByPlayer!]!
  awardsBySeason(seasonId: String!): [Award!]!
  competitionById(compId: String!): Competition!
  competitionsByOrg(orgId: String!): [Competition!]!
  getTeams: Team!
  getUsers: [User!]!
  hallOfFamePlayers(teamId: String!): [Player!]!
  highLowStats(teamId: String!): MostGoalsStats!
  matchById(matchId: String!): Match!
  matchStats(seasonId: String!, teamId: String!): MatchStats!
  matchesByOpponent(opponentId: String!, teamId: String!): [MatchesBySeason!]!
  matchesBySeason(limit: Float!, offset: Float!, seasonId: String!, teamId: String!): [MatchesBySeason!]!
  mostAssistsByPlayerInMatches(playerId: String!, teamId: String!): [MostByPlayerMatches!]!
  mostAssistsInGame(teamId: String!): [MostInMatch!]!
  mostGoalsAndMostAssistsByPlayer(playerId: String!, teamId: String!): [MostGoalsAndAssists!]!
  mostGoalsByPlayerInMatches(playerId: String!, teamId: String!): [MostByPlayerMatches!]!
  mostGoalsInGame(teamId: String!): [MostInMatch!]!
  opponentTable(teamId: String!): [OpponentTable!]!
  organizationById(orgId: String!): Organization!
  pastPlayers(teamId: String!): [PastPlayer!]!
  playerAllTimeStats(playerId: String!): [PlayerStats!]!
  playerById(playerId: String!): Player!
  playerSeasonStats(playerId: String!, seasonId: String!): [PlayerStats!]!
  playerVsStats(playerId: String!): [PlayerVsStats!]!
  playersBySeason(seasonId: String!, teamId: String!): [Player!]!
  playersByTeam(teamId: String!): [Player!]!
  playersSeasonStats(seasonId: String!, teamId: String!): [PlayerInMatch!]!
  positionFinishes(teamId: String!): [PositionFinishes!]!
  squadSeasonStats(seasonId: String!, teamId: String!): [SquadSeasonStats!]!
  teamById(teamId: String!): Team!
  teamBySearch(filter: String!): [Team!]!
  teamSeasonById(seasonId: String!): TeamSeason!
  teamSeasonsByTeam(teamId: String!): [TeamSeason!]!
  teamsByOrg(orgId: String!): [Team!]!
  topPlayerStats(teamId: String!): TopPlayerStats!
  trophiesByPlayer(data: TrophyByPlayer!): [Trophy!]!
  trophiesByTeam(teamId: String!): [TrophyResponse!]!
  trophyById(trophyId: String!): TrophyResponse!
  trophyTotals(teamId: String!): TrophyTotals!
  user: User!
  userOrganizations: [Organization!]!
  userTeams: [Team!]!
}

input RegisterUserInput {
  email: String!
  password: String!
  username: String
}

input ResetPasswordInput {
  password: String!
  token: String!
}

input SignInUserInput {
  email: String!
  password: String!
}

type SquadAllTimeStats {
  _id: String!
  apps: Float!
  assists: Float!
  assistsPerGame: Float!
  cleanSheets: Float!
  conceded: Float!
  concededPerGame: Float!
  dateOfBirth: String
  goals: Float!
  goalsPerGame: Float!
  mvp: Float!
  mvpPerGame: Float!
  name: String!
  nationality: String
}

type SquadSeasonStats {
  _id: String!
  apps: Float!
  assists: Float!
  assistsPerGame: Float!
  cleanSheets: Float!
  conceded: Float!
  concededPerGame: Float!
  dateOfBirth: String
  goals: Float!
  goalsPerGame: Float!
  mvp: Float!
  mvpPerGame: Float!
  name: String!
  nationality: String
}

"""The Team model"""
type Team {
  _id: ID!
  adminIds: [ID!]!
  awayShirt: String
  awayShorts: String
  awaySocks: String
  country: String
  createdAt: Timestamp
  homeShirt: String
  homeShorts: String
  homeSocks: String
  isActive: Boolean!
  isVerified: Boolean!
  kitsBackground: String
  location: String
  orgId: Organization!
  playerIds: [ID!]!
  seasonIds: [ID!]!
  stadiumCapacity: String
  stadiumLocation: String
  stadiumName: String
  stadiumSurface: String
  teamBadge: UploadedImage!
  teamName: String!
  teamRoles: [TeamRole!]!
  trophies: [ID!]!
  updatedAt: Timestamp
  yearFounded: String
}

type TeamRole {
  contact: String!
  name: String!
  role: String!
  roleId: String!
}

"""The Team Season model"""
type TeamSeason {
  _id: ID!
  awards: [Award!]!
  comment: String
  division: String
  leaguePosition: Float
  name: String!
  teamId: ID!
  yearEnded: String!
  yearStarted: String!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type TopPlayerStats {
  apps: [TopStatNames!]
  assists: [TopStatNames!]
  goals: [TopStatNames!]
  mvp: [TopStatNames!]
}

type TopStatName {
  id: String!
  name: String!
}

type TopStatNames {
  _id: Float!
  names: [TopStatName!]!
  value: Float!
}

"""The Trophy model"""
type Trophy {
  _id: ID!
  comment: String
  isFinal: Boolean!
  isWinner: Boolean!
  name: String!
  opponent: String
  seasonId: TeamSeason!
  teamId: Team!
  year: String!
}

input TrophyByPlayer {
  seasonIds: [String!]!
}

type TrophyResponse {
  _id: String!
  comment: String
  isFinal: Boolean!
  isWinner: Boolean!
  name: String!
  opponent: String
  season: String
}

type TrophyTotals {
  _id: String!
  final: Float!
  total: Float!
  winner: Float!
}

input UpdateOrganizationInput {
  city: String
  country: String
  name: String!
  website: String
  yearFounded: String
}

input UpdateTeamInput {
  awayShirt: String
  awayShorts: String
  awaySocks: String
  country: String
  homeShirt: String
  homeShorts: String
  homeSocks: String
  isActive: Boolean!
  kitsBackground: String
  location: String
  stadiumCapacity: String
  stadiumLocation: String
  stadiumName: String
  stadiumSurface: String
  teamName: String!
  yearFounded: String
}

input UpdateTeamRolesInput {
  contact: String
  name: String!
  role: String!
}

type UploadedImage {
  public_id: String!
  url: String!
}

"""The User model"""
type User {
  _id: ID!
  createdAt: Timestamp
  dateOfBirth: String
  email: String!
  image: UploadedImage!
  isVerified: Boolean!
  nationality: String
  orgIds: [ID!]!
  password: String!
  playerId: ID!
  roles: [String!]!
  teamIds: [ID!]!
  updatedAt: Timestamp
  username: String!
  verificationToken: String
  yearJoined: String!
}